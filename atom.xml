<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title>I am RookieOne</title>
  <link href="http://www.iamrookieone.com/atom.xml" rel="self"/>
  <link href="http://www.iamrookieone.com/"/>
  <updated>2011-12-12T18:04:16-06:00</updated>
  <id>http://www.iamrookieone.com/</id>
  <author>
    <name>Jonathan Birkholz</name>
    
  </author>

  
  <entry>
    <title>Learning Bash Aliases and Functions</title>
    <link href="http://www.iamrookieone.com/blog/2010/10/29/learning-bash/"/>
    <updated>2010-10-29T00:00:00-05:00</updated>
    <id>http://www.iamrookieone.com/blog/2010/10/29/learning-bash</id>
    <content type="html">&lt;p&gt;During our fantastical Lunch and Learn at ChaiOne, we went over customizing bash using aliases and functions. These little tools make normal command line mortals into command line gods… or at least demi-gods.&lt;/p&gt;

&lt;p&gt;If you are new to Macs and other Unix based systems, like I am, then what I am about to share will be new to you. It was new to me until today. And for those Unix gurus, if I describe something incorrectly please let me know.&lt;/p&gt;

&lt;p&gt;First of all there is a file called .bashrc in your home directory ( ~ ). This file is loaded anytime you run a command script or open a terminal window. In this file we can add aliases, functions, and other customizations for our command line.&lt;/p&gt;

&lt;p&gt;With an alias I can create a shortcut ‘g’ for ‘git status’.&lt;/p&gt;

&lt;p&gt;``` bash&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias g='git status'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Now I can just type ‘g’ to run ‘git status’.&lt;/p&gt;

&lt;p&gt;I can use a function to create a more robust shortcut. For example, I can create a shortcut for ‘git push’. In this function by default I push to ‘origin master’ but if I provide an argument it will push to ‘$argument master’.&lt;/p&gt;

&lt;p&gt;``` bash&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function gpush {
    if [[ -z $1 ]]
    then
     git push origin master    
    else
     git push $1 master
    fi
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;gpush =&gt; git push origin master&lt;/p&gt;

&lt;p&gt;gpush heroku =&gt; git push heroku master&lt;/p&gt;

&lt;p&gt;Once you add the alias or function to your .bashrc, you can reload the file using&lt;/p&gt;

&lt;p&gt;``` bash&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;And there is a shortcut for source ( . ) So you can use&lt;/p&gt;

&lt;p&gt;``` bash&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;. ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Now you know how to create aliases and functions. I must admit, I think its pretty damn cool. This coming from the guy that a year ago was hesitant to use git on the command line.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Houston Techfest - Design Patterns</title>
    <link href="http://www.iamrookieone.com/blog/2010/10/26/techfest-design-patterns/"/>
    <updated>2010-10-26T00:00:00-05:00</updated>
    <id>http://www.iamrookieone.com/blog/2010/10/26/techfest-design-patterns</id>
    <content type="html">&lt;p&gt;An email from Claudio reminded me that I completely forgot to link the slides and code from the Houston Techfest presentation!&lt;/p&gt;

&lt;p&gt;And just a reminder that everything is offered as is. But that doesn’t mean you can’t email me or Claudio for more information. :)&lt;/p&gt;

&lt;p&gt;You can find the slides on slideshare at :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.slideshare.net/RookieOne/techfest-design-patterns&quot;&gt;http://www.slideshare.net/RookieOne/techfest-design-patterns&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the code you can find (as is) at bitbucket :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://bitbucket.org/rookieone/design-patterns&quot;&gt;http://bitbucket.org/rookieone/design-patterns&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can find the code on GitHub at :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/RookieOne/Houston-Techfest-Design-Patterns&quot;&gt;http://github.com/RookieOne/Houston-Techfest-Design-Patterns&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Lighten Color in C#</title>
    <link href="http://www.iamrookieone.com/blog/2010/09/11/lighten-color/"/>
    <updated>2010-09-11T00:00:00-05:00</updated>
    <id>http://www.iamrookieone.com/blog/2010/09/11/lighten-color</id>
    <content type="html">&lt;p&gt;The following piece of code was originally written by Marcus Egger in a converter. I did a bit of refactoring to clean up the code and moved the code outside a converter and into an extension method.&lt;/p&gt;

&lt;p&gt;The extension method is off of Color and returns another Color. Now since it is an extension method you can use it in a converter or a markup extension (the latter being my favorite use).&lt;/p&gt;

&lt;p&gt;You can also get this code from my color project on GitHub :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/RookieOne/Colors&quot;&gt;http://github.com/RookieOne/Colors&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static class LightenColorExtension
{
    /// &amp;lt;summary&amp;gt;
    ///   This method applies lighting to a color.
    ///   For instance, a color that has a lighting factor of 1 applies, appears at its original value.
    ///   A color with a lighting factor of 0.5 appears only half as bright as it was before.
    ///   A color with a lighting factor of 1.5 appears roughly twice as bright as before.
    ///   A color with a lightning factor of 2 appears white.
    /// &amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&quot;originalColor&quot;&amp;gt;Base color&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&quot;lightFactor&quot;&amp;gt;
    ///   Amount of light applied to the color
    /// &amp;lt;/param&amp;gt;
    /// &amp;lt;returns&amp;gt;Lit color&amp;lt;/returns&amp;gt;
    /// &amp;lt;remarks&amp;gt;
    ///   This routine is very fast. Even when using it in tight loops, I (Markus) have not been able to 
    ///   meassure a significant amount of time spent in this routine (always less than 1ms). I was originally
    ///   concerened about the performance of this, so I added a caching mechanism, but that slowed things down
    ///   by 2 orders of magnitude.
    /// &amp;lt;/remarks&amp;gt;
    public static Color Lighten(this Color originalColor, float lightFactor)
    {
        if (TransformationNotNeeded(lightFactor))
            return originalColor;

        if (RealBright(lightFactor))
            return System.Windows.Media.Colors.White;

        if (ShouldDarken(lightFactor))
            return DarkenColor(originalColor, lightFactor);

        return LightenColor(originalColor, lightFactor);
    }

    private static bool TransformationNotNeeded(float lightFactor)
    {
        var value = lightFactor - 1.0f;

        return value &amp;lt; 0.01f
               &amp;amp;&amp;amp; value &amp;gt; -0.01f;
    }

    private static bool RealBright(float lightFactor)
    {
        return lightFactor &amp;gt;= 2.0f;
    }

    private static bool ShouldDarken(float lightFactor)
    {
        return lightFactor &amp;lt; 1.0f;
    }

    private static Color DarkenColor(Color color, float lightFactor)
    {
        var red = (byte) (color.R*lightFactor);
        var green = (byte) (color.G*lightFactor);
        var blue = (byte) (color.B*lightFactor);

        return Color.FromRgb(red, green, blue);
    }

    private static Color LightenColor(Color color, float lightFactor)
    {
        // Lighten
        // We do this by approaching 256 for a light factor of 2.0f
        float fFactor2 = lightFactor;
        if (fFactor2 &amp;gt; 1.0f)
        {
            fFactor2 -= 1.0f;
        }

        var red = LightenColorComponent(color.R, fFactor2);
        var green = LightenColorComponent(color.G, fFactor2);
        var blue = LightenColorComponent(color.B, fFactor2);

        return Color.FromRgb(red, green, blue);
    }

    private static byte LightenColorComponent(byte colorComponent, float fFactor)
    {
        var inverse = 255 - colorComponent;
        colorComponent += (byte) (inverse*fFactor);

        return colorComponent &amp;lt; 255
                   ? colorComponent
                   : (byte) 255;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Wizards of Smart #11 - Glenn Block part 2</title>
    <link href="http://www.iamrookieone.com/blog/2010/07/29/wizards-of-smart-11/"/>
    <updated>2010-07-29T00:00:00-05:00</updated>
    <id>http://www.iamrookieone.com/blog/2010/07/29/wizards-of-smart-11</id>
    <content type="html">&lt;p&gt;A lot of people have asked about the second part of the Glenn Block interview, so here it is. Ok so it is a month late. A lot of stuff was happening in July (I will explain on another post. Lots of good stuff but it just put the podcast on hold for a bit)&lt;/p&gt;

&lt;p&gt;In this podcast Glenn and Ryan dive more into REST. It is a great conversation. I felt like a fly on the wall, but it was a very lucky fly that learned a lot about REST. So enjoy.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Wizards of Smart #10 - Glenn Block part 1</title>
    <link href="http://www.iamrookieone.com/blog/2010/06/24/wizards-of-smart-10/"/>
    <updated>2010-06-24T00:00:00-05:00</updated>
    <id>http://www.iamrookieone.com/blog/2010/06/24/wizards-of-smart-10</id>
    <content type="html">&lt;p&gt;Ryan and I had a awesome opportunity of having Glenn Block join us on a Skype call a couple of weeks ago. We wanted to have him on and talk about what he is currently doing and try to avoid the whole MEF topic (we did dive a bit into it, but not too deep).&lt;/p&gt;

&lt;p&gt;So part 1, Glenn introduces himself and gives a history of his current move from MEF to WCF and his vision on what he hopes to do by joining the team.&lt;/p&gt;

&lt;p&gt;Glenn blogs at codebetter.com : &lt;a href=&quot;http://codebetter.com/blogs/glenn.block/&quot;&gt;http://codebetter.com/blogs/glenn.block/&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Wizards of Smart #9 - 25 Zeroes + IDEs + SOLID</title>
    <link href="http://www.iamrookieone.com/blog/2010/06/22/wizards-of-smart-9/"/>
    <updated>2010-06-22T00:00:00-05:00</updated>
    <id>http://www.iamrookieone.com/blog/2010/06/22/wizards-of-smart-9</id>
    <content type="html">&lt;p&gt;This conversation centers around Robert Martin’s Rails presentation titled “25 Zeros”.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.oreilly.com/rails2010/public/schedule/detail/14134&quot;&gt;http://en.oreilly.com/rails2010/public/schedule/detail/14134&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Part of the conversation dived into IDEs and Ryan sent me a link to Code Bubbles.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cs.brown.edu/people/acb/codebubbles_site.htm&quot;&gt;http://www.cs.brown.edu/people/acb/codebubbles_site.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ryan later references the SOLID article in CODE Magazine by Derick Bailey.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.code-magazine.com/Article.aspx?quickid=1001061&quot;&gt;http://www.code-magazine.com/Article.aspx?quickid=1001061&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Visual Studio Theme - Bearkat</title>
    <link href="http://www.iamrookieone.com/blog/2010/06/17/visual-studio-theme/"/>
    <updated>2010-06-17T12:00:00-05:00</updated>
    <id>http://www.iamrookieone.com/blog/2010/06/17/visual-studio-theme</id>
    <content type="html">&lt;p&gt;Sharing my Visual Studio theme has been on my list of things to do for awhile now. When the site &lt;a href=&quot;http://studiostyles.info/&quot;&gt;http://studiostyles.info/&lt;/a&gt; came up, I immediately thought here is an easy way to share my color scheme.&lt;/p&gt;

&lt;p&gt;I finally created my theme on the site: &lt;a href=&quot;http://studiostyles.info/schemes/bearkat&quot;&gt;http://studiostyles.info/schemes/bearkat&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Be sure to check it out!&lt;/p&gt;

&lt;p&gt;For those who might like the colors but not the way I used them (and for me to remember what the colors are):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Black : R22 G22 B22&lt;/li&gt;
&lt;li&gt;Blue : R43 G145 B175&lt;/li&gt;
&lt;li&gt;Green : R102 G143 B95&lt;/li&gt;
&lt;li&gt;Orange : R255 G116 B0&lt;/li&gt;
&lt;li&gt;Red : R163 G21 B21&lt;/li&gt;
&lt;li&gt;Gray : R128 G128 B128&lt;/li&gt;
&lt;li&gt;Light Green : R206 G255 B132&lt;/li&gt;
&lt;li&gt;Tan : R189 G162 B101&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
  
  <entry>
    <title>Virtual Brown Bag 6/17/2010</title>
    <link href="http://www.iamrookieone.com/blog/2010/06/17/virtual-brown-bag/"/>
    <updated>2010-06-17T12:00:00-05:00</updated>
    <id>http://www.iamrookieone.com/blog/2010/06/17/virtual-brown-bag</id>
    <content type="html">&lt;p&gt;Ed is doing a fantastic job capturing the links and the topics from the Virtual Brown Bags but I think I will still throw some links up on my site.&lt;/p&gt;

&lt;h2&gt;C# and Lambdas + Events&lt;/h2&gt;

&lt;p&gt;Shared some code on using Lambdas to listen to events. Alan Stevens recommended the reading of C# in Depth : &lt;a href=&quot;http://www.manning.com/skeet/&quot;&gt;http://www.manning.com/skeet/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;RailsConf + Skills Matter Videos&lt;/h2&gt;

&lt;p&gt;Uncle Bob : 25-Zeroes : &lt;a href=&quot;http://www.youtube.com/watch#!v=mslMLp5bQD0&amp;amp;feature=related&quot;&gt;http://www.youtube.com/watch#!v=mslMLp5bQD0&amp;amp;feature=related&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Martin Feathers : Good Code : &lt;a href=&quot;http://www.youtube.com/watch?v=L9ccnRixyMg&amp;amp;feature=PlayList&amp;amp;p=393ECE649BB3813D&amp;amp;playnext_from=PL&amp;amp;index=6&quot;&gt;http://www.youtube.com/watch?v=L9ccnRixyMg&amp;amp;feature=PlayList&amp;amp;p=393ECE649BB3813D&amp;amp;playnext_from=PL&amp;amp;index=6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Udi Dahan : CQRS : &lt;a href=&quot;http://skillsmatter.com/podcast/open-source-dot-net/udi-dahan-command-query-responsibility-segregation&quot;&gt;http://skillsmatter.com/podcast/open-source-dot-net/udi-dahan-command-query-responsibility-segregation&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;IDEs&lt;/h2&gt;

&lt;p&gt;Code Bubble : &lt;a href=&quot;http://www.cs.brown.edu/people/acb/codebubbles_site.htm&quot;&gt;http://www.cs.brown.edu/people/acb/codebubbles_site.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Code Canvas : &lt;a href=&quot;http://research.microsoft.com/apps/pubs/default.aspx?id=80076&quot;&gt;http://research.microsoft.com/apps/pubs/default.aspx?id=80076&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=d4NEaXajiI0&quot;&gt;http://www.youtube.com/watch?v=d4NEaXajiI0&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Software Metaphor&lt;/h2&gt;

&lt;p&gt;Drive: The Surprising Truth About What Motivates Us : &lt;a href=&quot;http://www.amazon.com/Drive-Surprising-Truth-About-Motivates/dp/1594488843/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1276794836&amp;amp;sr=8-1&quot;&gt;http://www.amazon.com/Drive-Surprising-Truth-About-Motivates/dp/1594488843/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1276794836&amp;amp;sr=8-1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Film Making: A Better Software Development Metaphor &lt;a href=&quot;http://www.lostechies.com/blogs/rodpaddock/archive/2010/04/15/film-making-a-better-software-development-metaphor.aspx&quot;&gt;http://www.lostechies.com/blogs/rodpaddock/archive/2010/04/15/film-making-a-better-software-development-metaphor.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ayende : Garden : &lt;a href=&quot;http://ayende.com/Blog/archive/2007/09/18/The-Right-Metaphor-Software-as-a-garden-not-a-building.aspx&quot;&gt;http://ayende.com/Blog/archive/2007/09/18/The-Right-Metaphor-Software-as-a-garden-not-a-building.aspx&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Wizards of Smart - Heroku, Cloud, and Iron Ruby</title>
    <link href="http://www.iamrookieone.com/blog/2010/06/17/wizards-of-smart-8/"/>
    <updated>2010-06-17T00:00:00-05:00</updated>
    <id>http://www.iamrookieone.com/blog/2010/06/17/wizards-of-smart-8</id>
    <content type="html">&lt;p&gt;Sorry for the long delay guys. Ryan and I are both in the middle of deploying applications so other things are on our minds.
While we wait for me to edit the recording we did last night and we await Glenn Block’s approval on the fantastic 2 shows we did with him, we can enjoy a smaller conversation Ryan and I had on Heroku, Azure, and a bit about Iron Ruby.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Reducing Exceptional Cases</title>
    <link href="http://www.iamrookieone.com/blog/2010/06/08/wizards-of-smart-7/"/>
    <updated>2010-06-08T00:00:00-05:00</updated>
    <id>http://www.iamrookieone.com/blog/2010/06/08/wizards-of-smart-7</id>
    <content type="html">&lt;p&gt;Ryan starts with describing his love affair with F#, which leads to a discussion of FubuMVC, which leads to a discussion of Performance Problems (not related to Fubu MVC)… etc. So a standard Wizards of Smart conversation.  :)&lt;/p&gt;

&lt;p&gt;I titled this Performance since most of the conversation centered around our experiences with targeting and improving performance.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Reducing Exceptional Cases</title>
    <link href="http://www.iamrookieone.com/blog/2010/06/04/reducing-exceptional-cases/"/>
    <updated>2010-06-04T12:00:00-05:00</updated>
    <id>http://www.iamrookieone.com/blog/2010/06/04/reducing-exceptional-cases</id>
    <content type="html">&lt;p&gt;We have a third party control suite that provided some aggregation functionality. The third party controls had some built in aggregate functions but was missing some other more business centric functions.&lt;/p&gt;

&lt;p&gt;We ended up coding every aggregate as a separate custom class and not using any of the built in aggregates. My team member asked me why not use the built in aggregates?&lt;/p&gt;

&lt;p&gt;The reasoning is that if we used some built-in aggregates and then built the custom aggregates for the other functions, we would have 2 methods of aggregation to maintain. If we treat all the aggregates as custom, then instead of having 2 scenarios, we have one. We don’t have any exceptions. All aggregates are custom aggregates.&lt;/p&gt;

&lt;p&gt;Not only do we simplify our code and future maintenance, we eliminate any dependency on the third party aggregates. Now we are free to change control vendors and not worry about losing our aggregation functionality.&lt;/p&gt;

&lt;p&gt;The point I want to make is look to simplify your code. Eliminate exceptional cases as much as possible. Make everything the same and you achieve simplicity and flexibility.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Linq - Sum</title>
    <link href="http://www.iamrookieone.com/blog/2010/06/04/linq-sum/"/>
    <updated>2010-06-04T00:00:00-05:00</updated>
    <id>http://www.iamrookieone.com/blog/2010/06/04/linq-sum</id>
    <content type="html">&lt;p&gt;Last week I started an ongoing section during the Virtual Brown Bag where I go over a Linq function (or two). The general idea is that although most people ‘use’ Linq, there are lots of functions that are overlooked.&lt;/p&gt;

&lt;p&gt;In this blog post I will demonstrate basic usage cases for the Linq Sum function.&lt;/p&gt;

&lt;h2&gt;Numbers&lt;/h2&gt;

&lt;p&gt;If you have a collection of numbers and you want the sum of their values, then  simply call Sum. It can’t get any easier.&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void should_sum_values()
{
    var nums = new List&amp;lt;int&amp;gt;
                   {
                       5,
                       9,
                       1,
                       10
                   };
    int sum = nums.Sum();

    sum.ShouldBe(25);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Non-Numbers&lt;/h2&gt;

&lt;p&gt;If you want to sum a collection that isn’t made up of numbers, then you will be forced to specify which number property you would like to sum.&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void summing_non_number_collection()
{
    var jedi = new List&amp;lt;Jedi&amp;gt;
                   {
                       new Jedi(&quot;Yoda&quot;).MidichlorianCountIs(1000),
                       new Jedi(&quot;Anakin Skywalker&quot;).MidichlorianCountIs(3000),
                       new Jedi(&quot;Luke Skywalker&quot;).MidichlorianCountIs(1500),
                       new Jedi(&quot;Obi-wan Kenobi&quot;).MidichlorianCountIs(500),
                   };
    // can't compile
    //var sum = jedi.Sum();
}


[Test]
public void should_be_able_to_specify_property_to_sum()
{
    var jedi = new List&amp;lt;Jedi&amp;gt;
                   {
                       new Jedi(&quot;Yoda&quot;).MidichlorianCountIs(1000),
                       new Jedi(&quot;Anakin Skywalker&quot;).MidichlorianCountIs(3000),
                       new Jedi(&quot;Luke Skywalker&quot;).MidichlorianCountIs(1500),
                       new Jedi(&quot;Obi-wan Kenobi&quot;).MidichlorianCountIs(500),
                   };

    int sum = jedi.Sum(j =&amp;gt; j.MidichlorianCount);

    sum.ShouldBe(6000);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;These tests can be found in my Learning Solution on GitHub and found in the Learning CSharp project : &lt;a href=&quot;http://github.com/RookieOne/Learning&quot;&gt;http://github.com/RookieOne/Learning&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Wizards of Smart - Episode 6</title>
    <link href="http://www.iamrookieone.com/blog/2010/06/03/wizards-of-smart-6/"/>
    <updated>2010-06-03T00:00:00-05:00</updated>
    <id>http://www.iamrookieone.com/blog/2010/06/03/wizards-of-smart-6</id>
    <content type="html">&lt;p&gt;The general theme for this podcast is handling Complexity through Composition. But we end up talking about Entity Framework, Fubu MVC, ISP, Rails, and reach new levels of nerdness with sentence composition.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Virtual Brown Bag - 6/3/2010</title>
    <link href="http://www.iamrookieone.com/blog/2010/06/03/virtual-brown-bag/"/>
    <updated>2010-06-03T00:00:00-05:00</updated>
    <id>http://www.iamrookieone.com/blog/2010/06/03/virtual-brown-bag</id>
    <content type="html">&lt;p&gt;A rather link filled, topic filled VBB. Not many direct coding examples but lots of great information.&lt;/p&gt;

&lt;h2&gt;LINQ Examples&lt;/h2&gt;

&lt;p&gt;I did share how to use Sum, Select Many, and Aggregate. The code was put into my learning csharp project in my learning solution on GitHub.&lt;/p&gt;

&lt;p&gt;I plan on writing a couple of blog posts on these LINQ items so stay tuned if you want more LINQ goodness.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/RookieOne/Learning&quot;&gt;http://github.com/RookieOne/Learning&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Wizards of Smart Podcast – Episode 5&lt;/h2&gt;

&lt;p&gt;More rails talk on this episode. But I did share the link with the VBB. &lt;a href=&quot;http://www.theabsentmindedcoder.com/2010/06/wizards-of-smart-episode-5_01.html&quot;&gt;http://www.theabsentmindedcoder.com/2010/06/wizards-of-smart-episode-5_01.html&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Absent Minded Coder Posts&lt;/h2&gt;

&lt;p&gt;I shared my 2 posts from the last brown bag…&lt;/p&gt;

&lt;p&gt;Structure Map 2.6 constructing the concrete type
&lt;a href=&quot;http://www.theabsentmindedcoder.com/2010/05/structure-map-26-constructing-concrete.html&quot;&gt;http://www.theabsentmindedcoder.com/2010/05/structure-map-26-constructing-concrete.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Interface Segregation Principle
&lt;a href=&quot;http://www.theabsentmindedcoder.com/2010/05/interface-segregation-principle-in.html&quot;&gt;http://www.theabsentmindedcoder.com/2010/05/interface-segregation-principle-in.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also shared George’s comment on the Udi InfoQ article : &lt;a href=&quot;http://www.infoq.com/presentations/Making-Roles-Explicit-Udi-Dahan&quot;&gt;http://www.infoq.com/presentations/Making-Roles-Explicit-Udi-Dahan&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Unlocker&lt;/h2&gt;

&lt;p&gt;Claudio shared a helpful tool to get rid of an annoying Windows error. &lt;a href=&quot;http://ccollomb.free.fr/unlocker/&quot;&gt;http://ccollomb.free.fr/unlocker/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;VS 2010 Step into .Net Framework&lt;/h2&gt;

&lt;p&gt;Claudio also shared a blog post showing how to setup Visual Studio 2010 to allow stepping into .Net Framework code. &lt;a href=&quot;http://weblogs.asp.net/rajbk/archive/2010/04/21/setting-up-visual-studio-2010-to-step-into-microsoft-net-source-code.aspx&quot;&gt;http://weblogs.asp.net/rajbk/archive/2010/04/21/setting-up-visual-studio-2010-to-step-into-microsoft-net-source-code.aspx&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Why Your Code Sucks&lt;/h2&gt;

&lt;p&gt;This might be my favorite link Claudio shared. The blog post talks about why your code sucks… yes he is talking to you. (and me…) :D&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.artima.com/weblogs/viewpost.jsp?thread=71730&quot;&gt;http://www.artima.com/weblogs/viewpost.jsp?thread=71730&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Resharper and Regions&lt;/h2&gt;

&lt;p&gt;Find out how to configure Resharper to remove regions &lt;a href=&quot;http://bit.ly/wtjK3&quot;&gt;http://bit.ly/wtjK3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also prevent Resharper from adding regions &lt;a href=&quot;http://bit.ly/9QgLYe&quot;&gt;http://bit.ly/9QgLYe&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Monads&lt;/h2&gt;

&lt;p&gt;Uncle Bob uploaded a WTF is a Monad presentation : &lt;a href=&quot;http://bit.ly/aBMIaL&quot;&gt;http://bit.ly/aBMIaL&lt;/a&gt; &amp;lt;- I plan to look at this tonight ;D&lt;/p&gt;

&lt;h2&gt;Revamp Your Code Review&lt;/h2&gt;

&lt;p&gt;Ryan wanted me to share a blog post by Kyle Baley discussing the code review process : &lt;a href=&quot;http://codebetter.com/blogs/kyle.baley/archive/2010/06/01/rietveld-or-how-to-revamp-your-code-review-process.aspx&quot;&gt;http://codebetter.com/blogs/kyle.baley/archive/2010/06/01/rietveld-or-how-to-revamp-your-code-review-process.aspx&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Nine Things ie9 is doing Right&lt;/h2&gt;

&lt;p&gt;Ryan also wanted me to share : &lt;a href=&quot;http://sixrevisions.com/web-development/five-things-ie9-is-actually-doing-right/&quot;&gt;http://sixrevisions.com/web-development/five-things-ie9-is-actually-doing-right/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;RSA Animate - Drive: The surprising truth about what motivates us&lt;/h2&gt;

&lt;p&gt;I think @TheCodeFoundary tweet’d this link earlier this week. It is an interesting video discussing how we are actually motivated by more than money. :D&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=u6XAPnuFjJc&quot;&gt;http://www.youtube.com/watch?v=u6XAPnuFjJc&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Git + GitHub&lt;/h2&gt;

&lt;p&gt;Claudio was asking about Git so I shared some links and walked through a simple workflow into how I commit locally and then push to my GitHub repository.&lt;/p&gt;

&lt;p&gt;Git Extensions can be found here : &lt;a href=&quot;http://sourceforge.net/projects/gitextensions/&quot;&gt;http://sourceforge.net/projects/gitextensions/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We also discovered this : &lt;a href=&quot;http://learn.github.com/&quot;&gt;http://learn.github.com/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Architecting TekPub&lt;/h2&gt;

&lt;p&gt;Great article on InfoQ. In the article they interview James Avery and Rob Conery about their experience with TekPub going from MVC to Ruby on Rails and the reasoning why.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/articles/architecting-tekpub&quot;&gt;http://www.infoq.com/articles/architecting-tekpub&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Future Rails Hands-On Demo?&lt;/h2&gt;

&lt;p&gt;I tossed out the idea of having a rails hands on talk where as Claudio talks, I code the application in rails. The purpose is to showcase how rapidly we can build an application and deploy the application using rails.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Wizards of Smart - Episode 5</title>
    <link href="http://www.iamrookieone.com/blog/2010/06/01/wizards-of-smart-5/"/>
    <updated>2010-06-01T00:00:00-05:00</updated>
    <id>http://www.iamrookieone.com/blog/2010/06/01/wizards-of-smart-5</id>
    <content type="html">&lt;p&gt;I recently was doing some volunteer work using Rails and started a conversation about my experience. This went on to general discussions on Ruby, Rails, and benefits of Dynamic Languages.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Interface Segregation Principle in practice</title>
    <link href="http://www.iamrookieone.com/blog/2010/05/31/interface-segregation-principle/"/>
    <updated>2010-05-31T00:00:00-05:00</updated>
    <id>http://www.iamrookieone.com/blog/2010/05/31/interface-segregation-principle</id>
    <content type="html">&lt;p&gt;I am working with some other team members integrating components to be consumed by different controls. For example someone could use a grid and then opt in to have sorting or filtering etc. It is a rather weird system but was decided upon before I arrived.&lt;/p&gt;

&lt;p&gt;Anyway, I am currently looking to implement an adapter for the formatting component. When I looked at the interface, ISP immediately jumped out at me. So I thought, why not do a blog post about identifying the problem and delivering the solution.&lt;/p&gt;

&lt;h2&gt;Interface Segregation Principle&lt;/h2&gt;

&lt;blockquote&gt;&lt;p&gt;The Interface Segregation Principle states that clients should not be forced to implement interfaces they don’t use. Instead of one fat interface many small interfaces are preferred based on groups of methods, each one serving one submodule. - &lt;a href=&quot;http://www.oodesign.com/interface-segregation-principle.html&quot;&gt;http://www.oodesign.com/interface-segregation-principle.html&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So instead of one large interface we should have many smaller interfaces with grouped behavior.&lt;/p&gt;

&lt;p&gt;When we see an interface like this, the violation of ISP should be readily apparent. (warning.. be prepared to scroll…..)&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/// &amp;lt;summary&amp;gt;
/// An interface defining the contract for anything that has columns that can be formatted.
/// &amp;lt;/summary&amp;gt;
public interface IColumnFormattingAdapter
{
    #region Methods

    /// &amp;lt;summary&amp;gt;
    /// Hides the column.
    /// &amp;lt;/summary&amp;gt;
    void HideColumn();

    /// &amp;lt;summary&amp;gt;
    /// Bests the fit header.
    /// &amp;lt;/summary&amp;gt;
    void BestFitHeader();

    /// &amp;lt;summary&amp;gt;
    /// Bests the fit column.
    /// &amp;lt;/summary&amp;gt;
    void BestFitColumn();

    /// &amp;lt;summary&amp;gt;
    /// Bests the fit header column.
    /// &amp;lt;/summary&amp;gt;
    void BestFitHeaderColumn();

    /// &amp;lt;summary&amp;gt;
    /// Bests the fit all columns/headers.
    /// &amp;lt;/summary&amp;gt;
    void BestFitAllHeaderColumns();

    /// &amp;lt;summary&amp;gt;
    /// Formats the column.
    /// &amp;lt;/summary&amp;gt;
    void FormatColumn();

    /// &amp;lt;summary&amp;gt;
    /// Formats all columns.
    /// &amp;lt;/summary&amp;gt;
    void FormatAllColumns();

    /// &amp;lt;summary&amp;gt;
    /// Shows the advanced formatting.
    /// &amp;lt;/summary&amp;gt;
    void ShowAdvancedFormatting();

    /// &amp;lt;summary&amp;gt;
    /// Shows the advanced report formatting.
    /// &amp;lt;/summary&amp;gt;
    void ShowAdvancedReportFormatting();

    /// &amp;lt;summary&amp;gt;
    /// Chooses the column.
    /// &amp;lt;/summary&amp;gt;
    void ChooseColumn();

    #endregion

    #region Feature Support

    /// &amp;lt;summary&amp;gt;
    /// Whether or not the adapter supports hiding of columns
    /// &amp;lt;/summary&amp;gt;
    Boolean AllowHideColumn { get; }

    /// &amp;lt;summary&amp;gt;
    /// Whether or not the adapter supports best fit based on the header text
    /// &amp;lt;/summary&amp;gt;
    Boolean AllowBestFitHeader { get; }

    /// &amp;lt;summary&amp;gt;
    /// Whether or not the adapter supports best fit based on the column contents
    /// &amp;lt;/summary&amp;gt;
    Boolean AllowBestFitColumn { get; }

    /// &amp;lt;summary&amp;gt;
    /// Whether or not the adapter supports best fit based on the longer of header text and column contents
    /// &amp;lt;/summary&amp;gt;
    Boolean AllowBestFitHeaderColumn { get; }

    /// &amp;lt;summary&amp;gt;
    /// Whether or not the adapter supports best fit on all columns based on the longer of header text and column contents
    /// &amp;lt;/summary&amp;gt;
    Boolean AllowBestFitAllHeaderColumns { get; }

    /// &amp;lt;summary&amp;gt;
    /// Whether or not the adapter supports formatting of a column
    /// &amp;lt;/summary&amp;gt;
    Boolean AllowFormatColumn { get; }

    /// &amp;lt;summary&amp;gt;
    /// Whether or not the adapter supports formatting of all columns
    /// &amp;lt;/summary&amp;gt;
    Boolean AllowFormatAllColumns { get; }

    /// &amp;lt;summary&amp;gt;
    /// Whether or not the adapter supports advanced conditional formatting
    /// &amp;lt;/summary&amp;gt;
    Boolean AllowAdvancedFormatting { get; }

    /// &amp;lt;summary&amp;gt;
    /// Whether or not the adapter supports advanced report property formatting
    /// &amp;lt;/summary&amp;gt;
    Boolean AllowAdvancedReportFormatting { get; }

    /// &amp;lt;summary&amp;gt;
    /// Whether or not the adapter supports choosing columns
    /// &amp;lt;/summary&amp;gt;
    Boolean AllowChooseColumn { get; }

    #endregion
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Identifying ISP Violation&lt;/h2&gt;

&lt;p&gt;The first characteristic that the interface violates ISP is the sheer size. This interface weighs in at 117 lines. Granted there are comments, etc but it is still rather large.&lt;/p&gt;

&lt;p&gt;The second characteristic that the interface violates ISP (and the biggest eye sore) is all the Allow properties. That should make you stop and scratch your head.&lt;/p&gt;

&lt;h2&gt;Fixing the interface&lt;/h2&gt;

&lt;p&gt;Let’s simplify the bad interface and then learn how to fix it.&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/// &amp;lt;summary&amp;gt;
/// An interface defining the contract for anything that has columns that can be formatted.
/// &amp;lt;/summary&amp;gt;
public interface IBadColumnFormattingAdapter
{
    /// &amp;lt;summary&amp;gt;
    /// Hides the column.
    /// &amp;lt;/summary&amp;gt;
    void HideColumn();

    /// &amp;lt;summary&amp;gt;
    /// Chooses the column.
    /// &amp;lt;/summary&amp;gt;
    void ChooseColumn();

    /// &amp;lt;summary&amp;gt;
    /// Whether or not the adapter supports hiding of columns
    /// &amp;lt;/summary&amp;gt;
    Boolean AllowHideColumn { get; }

    /// &amp;lt;summary&amp;gt;
    /// Whether or not the adapter supports choosing columns
    /// &amp;lt;/summary&amp;gt;
    Boolean AllowChooseColumn { get; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;So in this scenario we can hide a column and then choose a column. Instead of having a large interface for these two behaviors, we should package the behaviors into separate interfaces.&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/// &amp;lt;summary&amp;gt;
/// Interface for supporting Hide Column feature
/// &amp;lt;/summary&amp;gt;
public interface IHideColumn
{
  /// &amp;lt;summary&amp;gt;
  ///Hides the column.
  /// &amp;lt;/summary&amp;gt;
  void HideColumn();
}

/// &amp;lt;summary&amp;gt;
/// Interface for supporting Choose Column feature
/// &amp;lt;/summary&amp;gt;
public interface IChooseColumn
{
   /// &amp;lt;summary&amp;gt;
   ///Chooses the column.
   /// &amp;lt;/summary&amp;gt;
   void ChooseColumn();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Now our functionality is encapsulated into behavior centric interfaces. Our adapters can then opt in to provide the functionality, and we don’t have the superfluous Allow properties.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Structure Map 2.6 Constructing the Concrete Type</title>
    <link href="http://www.iamrookieone.com/blog/2010/05/28/structure-map-concrete-type/"/>
    <updated>2010-05-28T00:00:00-05:00</updated>
    <id>http://www.iamrookieone.com/blog/2010/05/28/structure-map-concrete-type</id>
    <content type="html">&lt;h2&gt;Basic Use with Func&lt;T&gt;&lt;/h2&gt;

&lt;p&gt;Ryan yet again was asking for how to do another crazy thing with Structure Map. :)&lt;/p&gt;

&lt;p&gt;He wanted to know if there was a way to control the construction of a concrete type. Well.. he didn’t put it that way but it is what he wanted to know.&lt;/p&gt;

&lt;p&gt;Besides the regular For&lt;I&gt;().Use&lt;C&gt;()… we have the ability to construct the concrete type ourselves with a simple action.&lt;/p&gt;

&lt;p&gt;To demo this I have a Foo class that accepts a string in the constructor.&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Foo : IFoo
{
    public Foo(string message)
    {
        Message = message;
    }

    public string Message { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;We want to pass in the message explicitly so we configure our container and tell it how to provide the concrete implementation.&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_container = new Container();
_container.Configure(x =&amp;gt; x.For&amp;lt;IFoo&amp;gt;().Use(() =&amp;gt; new Foo(&quot;Hello&quot;)));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;And the tests to verify it works :&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void IFoo_should_resolve_to_Foo()
{
    var foo = _container.GetInstance&amp;lt;IFoo&amp;gt;();

    foo.ShouldBeType&amp;lt;Foo&amp;gt;();            
}

[Test]
public void message_should_be_set_during_construction()
{
    var foo = _container.GetInstance&amp;lt;IFoo&amp;gt;();

    foo.Message.ShouldBe(&quot;Hello&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Using Func&amp;lt;IContext, T&gt;&lt;/h2&gt;

&lt;p&gt;There are other scenarios where not only do you want more control on a concrete types construction, but also need to resolve other dependencies. SM also allows you to specify a Func&amp;lt;IContext,T&gt; where the IContext allows you to resolve classes from the container.&lt;/p&gt;

&lt;p&gt;So if we have a scenario with an IBar and an IFoo:&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Bar : IBar
{
    public IFoo Foo { get; set; }
}

class Foo : IFoo
{
}

interface IBar
{
    IFoo Foo { get; }
}

interface IFoo
{
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;We can use the Func&amp;lt;IContext,T&gt; similar to how we used the Func&lt;T&gt;.&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_container = new Container();

_container.Configure(x =&amp;gt;
{
    x.For&amp;lt;IFoo&amp;gt;().Use&amp;lt;Foo&amp;gt;();
    x.For&amp;lt;IBar&amp;gt;().Use(c =&amp;gt;
                          {
                              var bar = new Bar();
                              bar.Foo = c.GetInstance&amp;lt;IFoo&amp;gt;();
                              return bar;
                          });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;And naturally our test to verify it works:&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void should_set_foo_property_on_bar()
{
    var bar = _container.GetInstance&amp;lt;IBar&amp;gt;();

    bar.Foo.ShouldBeType&amp;lt;Foo&amp;gt;();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;So that was a brief introduction into using Funcs to provide the concrete implementation of an interface for Structure Map.&lt;/p&gt;

&lt;p&gt;All the Learning Structure Map code can be found in my Learning solution on Git Hub : &lt;a href=&quot;http://github.com/RookieOne/Learning&quot;&gt;http://github.com/RookieOne/Learning&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Virtual Brown Bag 5/27/2010</title>
    <link href="http://www.iamrookieone.com/blog/2010/05/27/virtual-brown-bag/"/>
    <updated>2010-05-27T12:00:00-05:00</updated>
    <id>http://www.iamrookieone.com/blog/2010/05/27/virtual-brown-bag</id>
    <content type="html">&lt;p&gt;Claudio was a no show today. As I predicted he had meetings he could not get out of.&lt;/p&gt;

&lt;p&gt;But we powered through and covered a range of topics.&lt;/p&gt;

&lt;h2&gt;Wizards of Smart podcasts&lt;/h2&gt;

&lt;p&gt;Since our last meeting there have been 2 episodes of Wizards of Smart.&lt;/p&gt;

&lt;p&gt;Episode 3 – Testing : &lt;a href=&quot;http://www.theabsentmindedcoder.com/2010/05/wizards-of-smart-episode-3-testing.html&quot;&gt;http://www.theabsentmindedcoder.com/2010/05/wizards-of-smart-episode-3-testing.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Episode 4 – Code Reviews, Work Environment, Developers : &lt;a href=&quot;http://www.theabsentmindedcoder.com/2010/05/wizards-of-smart-episode-4.html&quot;&gt;http://www.theabsentmindedcoder.com/2010/05/wizards-of-smart-episode-4.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ruby on Rails
I talked a bit about my experience this week with Ruby on Rails. In particular I pointed out how I enjoyed the migration functionality.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://guides.rubyonrails.org/migrations.html&quot;&gt;http://guides.rubyonrails.org/migrations.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Alper pointed out that c4mvc also has a session on some .net tools for migration :&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.c4mvc.net/Home/Events&quot;&gt;http://www.c4mvc.net/Home/Events&lt;/a&gt; –&gt; March Show and Tell : Topic Database Migration Frameworks : MigratorDotNet and RikMigrations&lt;/p&gt;

&lt;p&gt;I also point out the Dev Chix wiki for learning Ruby on Rails : &lt;a href=&quot;http://wiki.devchix.com/index.php?title=Server_2003&quot;&gt;http://wiki.devchix.com/index.php?title=Server_2003&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The guide walks through every step from installing Ruby, rails gems, setting up git, heroku, and pushing your app to heroku. It’s a great guide for those new to rails (like me!)&lt;/p&gt;

&lt;h2&gt;SQLite Database Browser&lt;/h2&gt;

&lt;p&gt;I pointed out this tool for looking at Sqlite databases. I am using it to look at my rails database.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://sourceforge.net/projects/sqlitebrowser/&quot;&gt;http://sourceforge.net/projects/sqlitebrowser/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Domain Driven Design&lt;/h2&gt;

&lt;p&gt;Ed asked about DDD for everyday apps. I then fumbled around and gave a high level talk on how to apply some DDD principles to everyday code. I think I will work on a presentation on the subject because I find it an interesting perspective.&lt;/p&gt;

&lt;p&gt;We did point out some DDD resources :&lt;/p&gt;

&lt;p&gt;Greg Young on Herding Code : &lt;a href=&quot;http://herdingcode.com/?p=189&quot;&gt;http://herdingcode.com/?p=189&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Greg Young on InfoQ : &lt;a href=&quot;http://www.infoq.com/interviews/greg-young-ddd&quot;&gt;http://www.infoq.com/interviews/greg-young-ddd&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;David Laribee on Deep Fried Bytes : &lt;a href=&quot;http://deepfriedbytes.com/podcast/episode-6-talking-domain-driven-design-with-david-laribee-part-1/&quot;&gt;http://deepfriedbytes.com/podcast/episode-6-talking-domain-driven-design-with-david-laribee-part-1/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Eric Evan’s book : &lt;a href=&quot;http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1274981635&amp;amp;sr=8-1&quot;&gt;http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1274981635&amp;amp;sr=8-1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Jimmy Nilsson’s book : &lt;a href=&quot;http://www.amazon.com/Applying-Domain-Driven-Design-Patterns-Examples/dp/0321268202/ref=sr_1_2?ie=UTF8&amp;amp;s=books&amp;amp;qid=1274981635&amp;amp;sr=8-2&quot;&gt;http://www.amazon.com/Applying-Domain-Driven-Design-Patterns-Examples/dp/0321268202/ref=sr_1_2?ie=UTF8&amp;amp;s=books&amp;amp;qid=1274981635&amp;amp;sr=8-2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Houston Techfest
I mentioned the Houston Techfest again and discussed some potential presentations Claudio and I might be doing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.houstontechfest.com/dotnetnuke/default.aspx&quot;&gt;http://www.houstontechfest.com/dotnetnuke/default.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They are still taking abstracts. Email your abstracts and bio to speakers@houstontechfest.com&lt;/p&gt;

&lt;h2&gt;Linq&lt;/h2&gt;

&lt;p&gt;I walked through some linq examples that can be found in my learning C# project in my Learning Repository : &lt;a href=&quot;http://github.com/RookieOne/Learning&quot;&gt;http://github.com/RookieOne/Learning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We looked at Select, my pet peeve of using a Where and then FirstorDefault, and also how to use Any instead of Count to verify if a list is not empty.&lt;/p&gt;

&lt;p&gt;I took a poll and there was a lot of interest in doing more Linq best practices and techniques. I am working on a presentation as well and it was nice to see there was a good deal of interest.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Wizards of Smart - Episode 4</title>
    <link href="http://www.iamrookieone.com/blog/2010/05/27/wizards-of-smart-4/"/>
    <updated>2010-05-27T00:00:00-05:00</updated>
    <id>http://www.iamrookieone.com/blog/2010/05/27/wizards-of-smart-4</id>
    <content type="html">&lt;p&gt;Ryan and I talk about code reviews, work environment, and some traits of a good developer.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Structure Map 2.6 Constructor Arguments</title>
    <link href="http://www.iamrookieone.com/blog/2010/05/26/structure-map-constructor/"/>
    <updated>2010-05-26T00:00:00-05:00</updated>
    <id>http://www.iamrookieone.com/blog/2010/05/26/structure-map-constructor</id>
    <content type="html">&lt;h2&gt;Constructor Injection&lt;/h2&gt;

&lt;p&gt;When we use an IoC tool the most basic functionality we expect is to have constructor injection. That means if we have a type we are resolving and one of the constructor’s parameters is also a type, the container will resolve that type as well.&lt;/p&gt;

&lt;p&gt;And turtles all the way down…&lt;/p&gt;

&lt;p&gt;If we have two types(Foo : IFoo and Bar : IBar) and in Bar’s constructor it has an IFoo parameter, we should expect the IFoo parameter to be resolved to an instance of Foo.&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Bar : IBar
{
    public Bar(IFoo foo)
    {
        Foo = foo;
    }

    public IFoo Foo { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Our container is setup like :&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_container = new Container();

_container.Configure(x =&amp;gt;
                         {
                             x.For&amp;lt;IFoo&amp;gt;().Use&amp;lt;Foo&amp;gt;();
                             x.For&amp;lt;IBar&amp;gt;().Use&amp;lt;Bar&amp;gt;();
                         });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;We then expect :&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void IBar_should_resolve_to_Bar()
{
    var bar = _container.GetInstance&amp;lt;IBar&amp;gt;();

    bar.ShouldBeType&amp;lt;Bar&amp;gt;();
}

[Test]
public void IBars_IFoo_dependency_should_resolve_to_Foo()
{
    var bar = _container.GetInstance&amp;lt;IBar&amp;gt;();

    bar.Foo.ShouldBeType&amp;lt;Foo&amp;gt;();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Constructor Arguments&lt;/h2&gt;

&lt;p&gt;Sometimes you need to specify the exact argument for a given type when it is constructed. Structure Map allows you to provide specific values for resolving a constructors argument.&lt;/p&gt;

&lt;p&gt;For example, Ryan was asking if there is a method with SM to resolve an “id” value from an HttpContext. I know SM has some fancy session management lifecycle features built in, but since I don’t live in the Web world I have never explored what can and can not be done with those features.&lt;/p&gt;

&lt;p&gt;What I do know is that I can specify where my “id” parameter comes from.&lt;/p&gt;

&lt;p&gt;Let’s look at this simple example.&lt;/p&gt;

&lt;p&gt;In my scenario I have a Foo class.&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Foo : IFoo
{
    public Foo(int id, IBar bar)
    {
        Id = id;
        Bar = bar;
    }

    public int Id { get; set; }
    public IBar Bar { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;The id that is passed into Foo is providing by some mysterious X. In my case my X is an IIdProvider.&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class IdProvider : IIdProvider
{
    public int GetId()
    {
        return 1;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Now I want to tell SM that when it resolves an IFoo, I want it to use the IIdProvider to get the “id”.&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x.For&amp;lt;IFoo&amp;gt;().Use&amp;lt;Foo&amp;gt;()
    .Ctor&amp;lt;int&amp;gt;(&quot;id&quot;)
    .Is(c =&amp;gt; c.GetInstance&amp;lt;IIdProvider&amp;gt;().GetId());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;All together the configuration is:&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;_container = new Container();
_container.Configure(x =&amp;gt;
                         {
                             x.For&amp;lt;IIdProvider&amp;gt;().Use&amp;lt;IdProvider&amp;gt;();
                             x.For&amp;lt;IBar&amp;gt;().Use&amp;lt;Bar&amp;gt;();
                             x.For&amp;lt;IFoo&amp;gt;().Use&amp;lt;Foo&amp;gt;()
                                 .Ctor&amp;lt;int&amp;gt;(&quot;id&quot;)
                                 .Is(c =&amp;gt; c.GetInstance&amp;lt;IIdProvider&amp;gt;().GetId());
                         });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;And my tests to verify it works:&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void should_resolve_Bar()
{
    var foo = _container.GetInstance&amp;lt;IFoo&amp;gt;();

    foo.Bar.ShouldBeType&amp;lt;Bar&amp;gt;();
}

[Test]
public void should_resolve_id()
{
    var foo = _container.GetInstance&amp;lt;IFoo&amp;gt;();

    foo.Id.ShouldBe(1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2&gt;Lazy Constructor Arguments&lt;/h2&gt;

&lt;p&gt;Then Ryan tells me, he would really like to be lazy because he might not need the id for all requests. There are some Lazy features added to SM 2.6 but let’s just use what we already know to solve this problem.&lt;/p&gt;

&lt;p&gt;Instead of having an int Id parameter, let’s have a Func&lt;int&gt; getId parameter.&lt;/p&gt;

&lt;p&gt;Foo changes to :&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Foo : IFoo
{
    public Foo(Func&amp;lt;int&amp;gt; getId, IBar bar)
    {
        GetId = getId;
        Bar = bar;
    }

    public Func&amp;lt;int&amp;gt; GetId { get; set; }
    public IBar Bar { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Now our constructor configuration changes to :&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x.For&amp;lt;IFoo&amp;gt;().Use&amp;lt;Foo&amp;gt;()
    .Ctor&amp;lt;Func&amp;lt;int&amp;gt;&amp;gt;(&quot;getId&quot;)
    .Is(c =&amp;gt; c.GetInstance&amp;lt;IIdProvider&amp;gt;().GetId);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;And our tests become :&lt;/p&gt;

&lt;p&gt;``` csharp&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Test]
public void should_resolve_Bar()
{
    var foo = _container.GetInstance&amp;lt;IFoo&amp;gt;();

    foo.Bar.ShouldBeType&amp;lt;Bar&amp;gt;();
}

[Test]
public void should_resolve_id()
{
    var foo = _container.GetInstance&amp;lt;IFoo&amp;gt;();

    foo.GetId().ShouldBe(1);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Yes it is a poor man’s lazy instantiation. But in many ways its the clearest way to have the functionality.&lt;/p&gt;

&lt;p&gt;You can find all this code in my Git Hub Learning Repository and the Learning Structure Map solution : &lt;a href=&quot;http://github.com/RookieOne/Learning&quot;&gt;http://github.com/RookieOne/Learning&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
</feed>
